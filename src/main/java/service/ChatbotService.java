package service;

import model.ChatConversation;
import model.ChatMessage;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import model.Announcement;
import model.Product;
import data.AnnouncementDAO;
import data.ProductDAO;
import org.json.JSONObject;
import org.json.JSONArray;

public class ChatbotService {

    private static final String GEMINI_API_KEY = "AIzaSyB2weNrBEpHMD-N5F-SVxJFpyeLytHzQLk"; // üîë thay b·∫±ng key th·∫≠t c·ªßa b·∫°n
    private static final String GEMINI_URL
            = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" + GEMINI_API_KEY;

    private final List<ChatMessage> conversationHistory = new ArrayList<>();

    public String sendMessage(int userId, String content) {
        ChatConversation conversation = new ChatConversation(1, userId);
        ChatMessage userMsg = new ChatMessage(1, conversation.getId(), "user", content);
        conversation.addMessage(userMsg);
        conversationHistory.add(userMsg);
        String dbContext = findRelevantProductInfo(content);
        String announcementContext = findRelevantAnnouncements(content);
        String fullDbContext = Stream.of(dbContext, announcementContext)
                .filter(s -> s != null && !s.isEmpty())
                .collect(Collectors.joining("\n\n"));

        String aiReplyContent = callAIAPI(fullDbContext);

        ChatMessage aiMsg = new ChatMessage(2, conversation.getId(), "model", aiReplyContent);
        conversation.addMessage(aiMsg);
        conversationHistory.add(aiMsg);

        return aiReplyContent; // Tr·∫£ v·ªÅ String ƒë·ªÉ Servlet c√≥ th·ªÉ d√πng ngay
    }

    private String callAIAPI(String contextFromDB) {
        try {
            String baseContext = loadChatContext();
            JSONObject payload = new JSONObject();
            JSONArray contents = new JSONArray();

            // Th√™m l·ªãch s·ª≠ tr√≤ chuy·ªán v√†o payload
            for (ChatMessage msg : conversationHistory) {
                JSONObject messageContent = new JSONObject();
                messageContent.put("role", msg.getSender()); // "user" ho·∫∑c "model"
                messageContent.put("parts", new JSONArray().put(new JSONObject().put("text", msg.getContent())));
                contents.put(messageContent);
            }

            payload.put("contents", contents);

            // X√¢y d·ª±ng system_instruction: K·∫øt h·ª£p context m·∫∑c ƒë·ªãnh v√† context t·ª´ DB
            JSONObject systemInstruction = new JSONObject();
            JSONArray parts = new JSONArray();
            String fullContext = baseContext;
            if (contextFromDB != null && !contextFromDB.isEmpty()) {
                fullContext += "\n\n" + contextFromDB;
            }
            parts.put(new JSONObject().put("text", fullContext));
            systemInstruction.put("parts", parts);

            payload.put("system_instruction", systemInstruction);

            return callGeminiAPI(payload.toString());

        } catch (Exception e) {
            e.printStackTrace();
            return "‚ùå L·ªói khi x·ª≠ l√Ω AI: " + e.getMessage();
        }
    }

    private String callGeminiAPI(String jsonPayload) throws IOException {
        URL url = new URL(GEMINI_URL);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setRequestProperty("Content-Type", "application/json; utf-8");
        conn.setDoOutput(true);

        try (OutputStream os = conn.getOutputStream()) {
            byte[] input = jsonPayload.getBytes(StandardCharsets.UTF_8);
            os.write(input, 0, input.length);
        }

        int responseCode = conn.getResponseCode();
        InputStream inputStream = (responseCode >= 200 && responseCode < 300) ? conn.getInputStream() : conn.getErrorStream();

        StringBuilder response = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {
            String responseLine;
            while ((responseLine = br.readLine()) != null) {
                response.append(responseLine.trim());
            }
        }
        conn.disconnect();

        return parseGeminiReply(response.toString());
    }

    private String loadChatContext() {
        try (InputStream is = getClass().getClassLoader().getResourceAsStream("chat_context.txt")) {
            if (is == null) {
                System.err.println("Kh√¥ng t√¨m th·∫•y file chat_context.txt, d√πng context m·∫∑c ƒë·ªãnh.");
                return getDefaultContext();
            }
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {
                StringBuilder sb = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    sb.append(line).append("\n");
                }
                return sb.toString().trim();
            }
        } catch (IOException e) {
            e.printStackTrace();
            return getDefaultContext();
        }
    }

    private String getDefaultContext() {
        return "B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o t∆∞ v·∫•n b√°n h√†ng cho m·ªôt c·ª≠a h√†ng c√¥ng ngh·ªá. H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m·ªôt c√°ch ng·∫Øn g·ªçn, th√¢n thi·ªán v√† chuy√™n nghi·ªáp.";
    }

    private String parseGeminiReply(String jsonResponse) {
        try {
            JSONObject responseObject = new JSONObject(jsonResponse);

            if (responseObject.has("error")) {
                String errorMessage = responseObject.getJSONObject("error").getString("message");
                return "‚ùå API Gemini b√°o l·ªói: " + errorMessage;
            }

            JSONArray candidates = responseObject.getJSONArray("candidates");
            if (candidates.length() > 0) {
                JSONObject content = candidates.getJSONObject(0).getJSONObject("content");
                JSONArray parts = content.getJSONArray("parts");
                if (parts.length() > 0) {
                    return parts.getJSONObject(0).getString("text");
                }
            }
            return "ü§ñ Kh√¥ng t√¨m th·∫•y n·ªôi dung tr·∫£ l·ªùi trong response.";
        } catch (Exception e) {
            e.printStackTrace();
            return "ü§ñ L·ªói khi ƒë·ªçc ph·∫£n h·ªìi t·ª´ Gemini: " + jsonResponse;
        }
    }

    public void clearConversation() {
        conversationHistory.clear();
    }

    // B√™n trong file ChatbotService.java
    private String findRelevantProductInfo(String userMessage) {
        // Ph·∫ßn t√°ch keyword v·∫´n gi·ªØ nguy√™n

        String[] keywords = userMessage.split("\\s+");
        List<Product> relevantProducts = new ArrayList<>();
        ProductDAO productDAO = new ProductDAO();
        for (String keyword : keywords) {
            if (keyword.length() > 2 && !keyword.equalsIgnoreCase("gi√°") && !keyword.equalsIgnoreCase("bao nhi√™u")) {
                List<Product> found = productDAO.searchProducts(keyword);
                if (found != null) {
                    relevantProducts.addAll(found);
                }
            }
        }

        // Lo·∫°i b·ªè c√°c s·∫£n ph·∫©m tr√πng l·∫∑p b·∫±ng h√†m equals/hashCode ƒë√£ t·∫°o ·ªü Product.java
        List<Product> distinctProducts = relevantProducts.stream()
                .distinct()
                .collect(Collectors.toList());

        if (distinctProducts.isEmpty()) {
            return ""; // Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o
        }

        // ‚úÖ ƒê·ªäNH D·∫†NG L·∫†I CONTEXT: Cung c·∫•p nhi·ªÅu th√¥ng tin h∆°n cho AI
        StringBuilder contextBuilder = new StringBuilder();
        contextBuilder.append("D∆∞·ªõi ƒë√¢y l√† th√¥ng tin s·∫£n ph·∫©m t·ª´ CSDL c√≥ th·ªÉ li√™n quan, h√£y d·ª±a v√†o ƒë√¢y ƒë·ªÉ tr·∫£ l·ªùi:\n\n");
        for (Product p : distinctProducts) {
            contextBuilder.append("---")
                    .append("\nT√™n s·∫£n ph·∫©m: ").append(p.getName())
                    .append("\nTh∆∞∆°ng hi·ªáu: ").append(p.getBrand())
                    .append("\nGi√° b√°n: ").append(p.getPrice()) // D√πng h√†m ƒë·ªãnh d·∫°ng ti·ªÅn
                    .append("\nS·ªë l∆∞·ª£ng c√≤n l·∫°i: ").append(p.getQuantity())
                    .append("\nM√¥ t·∫£ ng·∫Øn: ").append(p.getDescription()).append("\n\n");
        }
        return contextBuilder.toString();
    }

    private String findRelevantAnnouncements(String userMessage) {
        // T√°ch c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng th√†nh t·ª´ng t·ª´ kh√≥a
        String[] keywords = userMessage.toLowerCase().split("\\s+");
        List<Announcement> relevantAnnouncements = new ArrayList<>();

        AnnouncementDAO announcementDAO = new AnnouncementDAO();
        for (String keyword : keywords) {
            // B·ªè qua m·∫•y t·ª´ ng·∫Øn ho·∫∑c qu√° chung chung
            if (keyword.length() > 2 && !keyword.equalsIgnoreCase("c√≥") && !keyword.equalsIgnoreCase("kh√¥ng")) {
                // G·ªçi DAO v·ªõi t·ª´ kh√≥a c·ª• th·ªÉ (v√≠ d·ª•: "sinh vi√™n")
                List<Announcement> found = announcementDAO.getAllAnnouncements();
                if (found != null) {
                    relevantAnnouncements.addAll(found);
                }
            }
        }

        // Lo·∫°i b·ªè c√°c k·∫øt qu·∫£ b·ªã tr√πng l·∫∑p
        List<Announcement> distinctAnnouncements = relevantAnnouncements.stream()
                .distinct()
                .collect(Collectors.toList());

        if (distinctAnnouncements.isEmpty()) {
            return ""; // Kh√¥ng t√¨m th·∫•y g√¨ th√¨ th√¥i
        }

        // ƒê·ªãnh d·∫°ng l·∫°i th√¥ng tin t√¨m ƒë∆∞·ª£c ƒë·ªÉ g·ª≠i cho AI
        StringBuilder contextBuilder = new StringBuilder();
        contextBuilder.append("Th√¥ng tin v·ªÅ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i, voucher c√≥ th·ªÉ li√™n quan:\n");
        for (Announcement a : distinctAnnouncements) {
            contextBuilder.append("- Ti√™u ƒë·ªÅ: ").append(a.getTitle())
                    .append(" (Hi·ªáu l·ª±c ƒë·∫øn ng√†y ").append(a.getEndDate()).append(")")
                    .append("\n  N·ªôi dung: ").append(a.getContent()).append("\n");
        }
        return contextBuilder.toString();
    }
}
