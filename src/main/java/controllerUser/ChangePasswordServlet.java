package controllerUser;

import data.PasswordUtil;
import data.AccountDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import java.io.IOException;
import model.Account;

@WebServlet("/client/changePassword")
public class ChangePasswordServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;
    private AccountDAO accountDAO = new AccountDAO();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        req.getRequestDispatcher("/client/changePassword.jsp").forward(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        HttpSession session = req.getSession(false);
        if (session == null || session.getAttribute("account") == null) {
            resp.sendRedirect(req.getContextPath() + "/client/login.jsp");
            return;
        }

        Account currentAcc = (Account) session.getAttribute("account");

        String oldPassword = req.getParameter("oldPassword");
        String newPassword = req.getParameter("newPassword");
        String confirmPassword = req.getParameter("confirmPassword");

        // üîπ Ki·ªÉm tra nh·∫≠p ƒë·ªß d·ªØ li·ªáu
        if (oldPassword == null || newPassword == null || confirmPassword == null
                || oldPassword.isEmpty() || newPassword.isEmpty() || confirmPassword.isEmpty()) {
            req.setAttribute("error", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            req.getRequestDispatcher("/client/changePassword.jsp").forward(req, resp);
            return;
        }

        // üîπ Ki·ªÉm tra tr√πng kh·ªõp
        if (!newPassword.equals(confirmPassword)) {
            req.setAttribute("error", "M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng kh·ªõp!");
            req.getRequestDispatcher("/client/changePassword.jsp").forward(req, resp);
            return;
        }
        if (!PasswordUtil.isStrongPassword(newPassword)) {
            req.setAttribute("error", "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±, g·ªìm ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát!");
            req.getRequestDispatcher("/client/changePassword.jsp").forward(req, resp);
            return;
        }

        // üîπ L·∫•y l·∫°i account t·ª´ DB ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
        Account accountDB = accountDAO.findByEmail(currentAcc.getEmail());

        if (accountDB == null) {
            req.setAttribute("error", "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!");
            req.getRequestDispatcher("/client/changePassword.jsp").forward(req, resp);
            return;
        }

        // üîπ So s√°nh m·∫≠t kh·∫©u c≈© (gi·ªëng login logic)
        String oldHashed = data.PasswordUtil.hashPassword(oldPassword);
        if (!accountDB.getPassword().equals(oldHashed)) {
            req.setAttribute("error", "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng!");
            req.getRequestDispatcher("/client/changePassword.jsp").forward(req, resp);
            return;
        }

        String email = (String) session.getAttribute("email");
        AccountDAO dao = new AccountDAO();
        // üîπ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
        boolean ok = dao.updatePassword(accountDB.getEmail(), newPassword);

        if (ok) {
            accountDB.setPassword(newPassword);
            session.setAttribute("account", accountDB);
            req.setAttribute("message", "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
            resp.sendRedirect(req.getContextPath() + "/client/profile");
        } else {
            req.setAttribute("error", "L·ªói h·ªá th·ªëng, ch∆∞a c·∫≠p nh·∫≠t ƒë∆∞·ª£c m·∫≠t kh·∫©u!");
            req.getRequestDispatcher("/client/changePassword.jsp").forward(req, resp);
        }
    }
}
